# Custom compiler for qface:
#
# Example input:
#   QFACE_SOURCES += my.foo.qface [required]
#   QFACE_MODULE_NAME = my_module_name [required]
#   QFACE_FORMAT = frontend (or backend, simulator... -- defaults to "frontend")
#   QFACE_OUTPUT_DIR = my_output_dir (defaults to current build dir)
#

isEmpty(QFACE_FORMAT): QFACE_FORMAT = frontend
isEmpty(QFACE_OUTPUT_DIR): QFACE_OUTPUT_DIR = $$OUT_PWD
isEmpty(QFACE_SOURCES): error("QFACE_SOURCES must be set!")
# TODO get rid of this, and use the qface file name without extension by default
isEmpty(QFACE_MODULE_NAME): error("QFACE_MODULE_NAME must be set!")

IVI_GENERATOR_PATH = $$[QT_HOST_BINS]/ivigenerator
win32: VIRTUALENV_ACTIVATION =  $$IVI_GENERATOR_PATH/qtivi_qface_virtualenv/Scripts/activate &&
else: VIRTUALENV_ACTIVATION = . $$IVI_GENERATOR_PATH/qtivi_qface_virtualenv/bin/activate &&
IVI_GENERATOR = $$VIRTUALENV_ACTIVATION python3 $$[QT_HOST_BINS]/ivigenerator/generate.py

# TODO make this work with multiple input files, or only support one QFACE_SOURCE
qface_sources.output = $$QFACE_OUTPUT_DIR/$${QFACE_MODULE_NAME}.pri
qface_sources.commands = $$IVI_GENERATOR -f $$QFACE_FORMAT ${QMAKE_FILE_NAME} $$QFACE_OUTPUT_DIR
qface_sources.input = QFACE_SOURCES
qface_sources.CONFIG += target_predeps no_link

# Reevaluate the Makefile after the generation has finished
Makefile.target = $$MAKEFILE
Makefile.depends = $$relative_path($$qface_sources.output, $$OUT_PWD)

# After the generation, this should exists and qmake can create the correct build tree
exists($$qface_sources.output) {
    include($$qface_sources.output)
}

QMAKE_EXTRA_COMPILERS += qface_sources
QMAKE_EXTRA_TARGETS += Makefile

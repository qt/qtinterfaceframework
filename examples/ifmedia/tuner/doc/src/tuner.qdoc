// Copyright (C) 2021 The Qt Company Ltd.
// Copyright (C) 2019 Luxoft Sweden AB
// Copyright (C) 2018 Pelagicore AG
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

/*!
     \example ifmedia/tuner
     \title QML Tuner Example
     \ingroup qtifmedia-examples

     \brief This Example shows how to use the Tuner API from QML.
     \image tuner.png

     This Example shows how to use the Tuner API from QML.

     First an AmFmTuner object is created. By default,
     the auto discovery is used to search for a plugin that implements QIfAmFmTunerBackendInterface.
     Depending on the selection of the band radio buttons the tuner band is selected.
     \snippet ifmedia/tuner/main.qml 1

     \section1 Station Information

     In the left third of the UI we want to display information about the current radio station
     as well as providing some buttons to change the stations or start a scan through all stations.
     \snippet ifmedia/tuner/main.qml 2

     The station property of AmFmTuner exposes the station you are currently listening to, which can
     be empty as well, if the frequency property was manually changed to a frequency no station is
     broadcasting on.

     \section1 Station List

     The middle part of the UI shows a list of all the available radio stations. Every item of the
     list shows the name and the frequency of a station. By clicking on one of the list items,
     the current station will be changed to this station. On the right side of every station is a
     \c + button which can be used to save this station into the preset list.
     \snippet ifmedia/tuner/main.qml 3

     To fill the ListView with all available stations, the FilterAndBrowseModel model is used. As
     the FilterAndBrowseModel is a generic model, it needs to know where the data should come from.
     This is done by passing the service object of the AmFmTuner to the model. The model will then
     use the QIfFilterAndBrowseModelInterface exposed by the same backend which is used by AmFmTuner.
     Because the tuner backend could expose multiple different lists, the contentType needs to be
     selected: in this case the contentType is set to \c station, which provides all available stations.
     \snippet ifmedia/tuner/main.qml 4

     To change the currently playing station the AmFmTuner::tune method is used by calling it
     in an onClicked handler
     \snippet ifmedia/tuner/main.qml 5

     \section1 Preset List

     The preset list occupies the right third of the UI and shows all favorite stations. This list
     is sorted and maintained by the user. A press on the \c + button of the station list will
     add a station to this list, the \c X button will remove the item and the arrow buttons can be
     used to change the order of the stations.
     \snippet ifmedia/tuner/main.qml 7

     Similar to the station list, the FilterAndBrowseModel is used as a model, but the contentType
     was changed to \c presets.
     For maintaining the list, the move and remove functions of FilterAndBrowseModel are used.


     \section1 Favorite Button

     The \c + button of the station list should be enabled if the station is not already part of
     the preset list. This is done by using the FilterAndBrowseModel::indexOf function which will
     search for the passed item and call the callback function passed as second argument with the
     result. Depending on whether the index is valid, the button will be enabled or disabled.
     This asynchronous approach is needed, as the preset list might be pretty big and the data might
     come from a different process which maintains the tuner state.
     \snippet ifmedia/tuner/main.qml 6

     If not already part of the preset list, the station is added to the list by using the
     FilterAndBrowseModel::insert method, which is passed \c 0 as the first parameter to add it on
     top of the list.
*/

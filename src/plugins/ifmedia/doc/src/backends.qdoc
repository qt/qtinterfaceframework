// Copyright (C) 2021 The Qt Company Ltd.
// Copyright (C) 2019 Luxoft Sweden AB
// Copyright (C) 2018 Pelagicore AG
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
\page qtifmedia-backends.html
\title QtIfMedia Backends
\ingroup qtif_backend_groups

All backends supporting interfaces from QtIfMedia

\annotatedlist qtifmedia_backend
*/

/*!
\page qtifmedia-tuner-simulation-backend.html
\title QtIfMedia Tuner Simulation Backend
\ingroup qtifmedia_backend
\ingroup qtif_backend

\brief Provides a static tuner simulation.

\section1 Supported interfaces
\list
    \li \l{org.qt-project.interfaceframework.AmFmTuner/1.0}
    \li \l{org.qt-project.interfaceframework.FilterAndBrowseModel/1.0}
\endlist

The backend will return a fixed set of radio stations on the FM band and no stations on the AM band.

For the FilterAndBrowseModel the following contenTypes are supported:
\list
    \li \b station A list of all stations found.
    \li \b presets A list for storing the users favorite stations.
\endlist

\note Both lists don't support filtering and sorting.
*/

/*!
\page qtifmedia-player-simulation-backend.html
\title QtIfMedia MediaPlayer Simulation Backend
\ingroup qtifmedia_backend
\ingroup qtif_backend

\brief Provides a media player simulation using QtMultimedia.

\section1 Requirements
\list
    \li QtMultimedia
    \li taglib
\endlist

\section1 Supported interfaces
\list
    \li \l{org.qt-project.interfaceframework.MediaPlayer/1.0}
    \li \l{org.qt-project.interfaceframework.MediaIndexer/1.0}
    \li \l{org.qt-project.interfaceframework.MediaDiscovery/1.0}
    \li \l{org.qt-project.interfaceframework.FilterAndBrowseModel/1.0}
\endlist

The backend uses QtMultimedia to offer real media playback on various platforms.
The indexer will automatically start to index all \c .mp3 files in the media folder.

For the FilterAndBrowseModel the following contenTypes are supported:
\list
    \li \b artist A list of all artists.
    \li \b album A list of all albums.
    \li \b track A list of all tracks.
\endlist

The model supports filtering and sorting, as well as navigating through the media library using
the following navigation paths:

\list
    \li Artist -> Album -> Track
    \li Album -> Track
\endlist

\note On systems where \c taglib is disabled, indexing of files doesn't work and because of that
the media database can't be created.

The MediaDiscoveryModel provides a simulation of USB thumb drives and can be configured using the
\c QTIFMEDIA_SIMULATOR_DEVICEFOLDER environment variable, which needs to be set to an absolute path.
Every sub-folder within that path is recognized as a new USB thumb drive.

Using the FilterAndBrowseModel on the discovered media devices, the \c file contentType can be used to
navigate through the device's folder structure.

Every new device discovered is automatically indexed and all \c .mp3 files can be retrieved using the
the FilterAndBrowseModel connected to the media player's service object to browse the library.

\section1 Configuration

This backend can be configured using \l QIfConfiguration::serviceSettings.
By default it will write its database to the application's cache location.
There is also a non persistent mode, where the indexed media database is not saved, but recreated
on every start of the app.
The backend uses \c qtifmedia as its configurationId and accepts the following serviceSettings:

\table
\header
    \li Name
    \li Description
\row
    \li useTemporaryDatabase
    \li The database is written to a temporary location and deleted when the application is stopped.
\row
    \li database
    \li A path to the media database which should be used.
\row
    \li customMediaFolder
    \li The local media directory (default: all media locations of the user - see also QStandardPaths)
\row
    \li customDeviceFolder
    \li The path which will be used by the DiscoveryModel for discovering media devices.
        (default: /home/<user>/usb-simulation)
\endtable

In addition the settings can be also provided by using the following environment variables:

\table
\header
    \li Name
    \li Description
\row
    \li QTIFMEDIA_TEMPORARY_DATABASE
    \li The database is written to a temporary location and deleted when the application is stopped.
\row
    \li QTIFMEDIA_SIMULATOR_DATABASE
    \li A path to the media database which should be used.
\row
    \li QTIFMEDIA_SIMULATOR_LOCALMEDIAFOLDER
    \li The local media directory (default: all media locations of the user - see also QStandardPaths)
\row
    \li QTIFMEDIA_SIMULATOR_DEVICEFOLDER
    \li The path which will be used by the DiscoveryModel for discovering media devices.
        (default: /home/<user>/usb-simulation)
\endtable
*/

/*!
\page qtifmedia-player-qtro-backend.html
\title QtIfMedia MediaPlayer RemoteObjects Backend
\ingroup qtifmedia_backend
\ingroup qtif_backend

\brief Connects to a media player using Qt Remote Objects.

\section1 Supported interfaces
\list
    \li \l{org.qt-project.interfaceframework.MediaPlayer/1.0}
    \li \l{org.qt-project.interfaceframework.MediaIndexer/1.0}
    \li \l{org.qt-project.interfaceframework.MediaDiscovery/1.0}
    \li \l{org.qt-project.interfaceframework.FilterAndBrowseModel/1.0}
\endlist

\section1 Configuration

The backend uses \c qtifmedia as it's configurationId and accepts the following serviceSettings:

\table
\header
    \li Name
    \li Description
\row
    \li connectionUrl
    \li The url the interface tries to connect to using Qt Remote Objects. Defaults to
        \c local:qtifmedia. Changing this value at runtime will reconnect the backend to the new URL.
\row
    \li connectionTimeout
    \li Defines when a timeout warning should be printed (in milliseconds).
        To disable the warning set the timeout to -1.
\endtable

In addition to those global settings, the values can also be provided per backend interface and
this allows the backend to connect to multiple remote objects instances. Interface specific
settings need to be prefixed with the interface name. The following example uses a global \c
connectionTimeout and a specific \c connectionUrl for the player interface, while all other
interfaces use the default \c connectionUrl:

\badcode
{
    connectionTimeout: 1000,
    MediaPlayer: {
        connectionUrl: "tcp://127.0.0.1:1234"
    }
}
\endcode

For backward compatibility a \c server.conf file in the current directory of the application (or
specified by \c SERVER_CONF_PATH), but is marked as deprecated and will be removed
in future Qt releases.
*/

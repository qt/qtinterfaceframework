/****************************************************************************
**
** Copyright (C) 2019 Luxoft Sweden AB
** Copyright (C) 2018 Pelagicore AG
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the QtIvi module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL-QTAS$
** Commercial License Usage
** Licensees holding valid commercial Qt Automotive Suite licenses may use
** this file in accordance with the commercial license agreement provided
** with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and The Qt Company.  For
** licensing terms and conditions see https://www.qt.io/terms-conditions.
** For further information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
\page backend-system.html
\title Dynamic Backend System
\nextpage Models
\contentspage Concepts

\section1 Feature

Modern automotive systems are very complex, usually developed on a strict timeframe. Consequently,
it is efficient to reuse parts of previously developed systems, for a new system. At the same time,
the main development is done by independent companies (tier-1). To make it possible to reuse code
from previous projects, and also incorportae code from tier-1 partners, the APIs are split into two
layers: a frontend and a backend. In Qt IVI, the frontend API is called a \b feature, as usually a
specific class is responsible for a specific feature area, such as QIviClimateControl, which
controls the climate feature area.

\section1 Backend

To function correctly, every feature needs to have a backend connected to it. This backend must
implement a corresponding feature backend interface. Only then, you can create a valid connection
between the feature and its backend.

Usually, every feature has only one backend interface class, which the backend needs to implement
for the feature to work. Every backend interface is derived from QIviFeatureInterface, which
provides generic functions and signals that every feature needs, such as error handling.

The backend implementations are grouped together and implemented inside a
\l{How to Create Qt Plugins}{Qt plugin}. This makes it easy to provide multiple backends
simultaneously and switch the backend at runtime. These backend plugins are loaded through
\l{QtIviCore}. A plugin can provide backend implementations for multiple features; there is no
need to create a separate plugin for each feature.

Qt IVI also distinguishes between two types of backends:

\list
    \li \b{production} - On a production system, you want to have only production backends running.
    \li \b{simulation} - During the development phase, it may be useful to have a simulation
        backend that you can use for frontend development, until the backend services are usable.
\endlist

Qt IVI uses a simple naming scheme to identify whether a plugin provides simulation or production
backends. Every simulation plugin needs to have either "simulation" or "simulator" in its name.
Alternatively, you can also set the "simulation" key in the plugin's metadata. This is especially
useful for static plugins.

\image backendtypes.jpg "Types of Backend"

\section1 QtIviCore

The QtIviCore module provides all the classes that are needed to glue the parts together. In
addition to providing the base classes like QIviAbstractFeature or QIviServiceObject, this module
also provides the QIviServiceManager, responsible for loading the necessary backend plugins.

\image feature_backend.jpg "Relationship between the Feature and the Backend"

\section1 QIviServiceManager

The QIviServiceManager is the central part of QtIviCore, keeping a record of all the available
backends and their exported interfaces. For this, the manager scans through all available plugins
and their accompanying metadata. This gives it the ability to only load plugins, which are actually
needed by a Feature, to reduce the startup time. All of this information is collected in the manager
in the form of a model, which enables developers to choose the plugin they want to use.

\section1 ServiceObjects

The ServiceObject concept keeps the features flexible, and makes it possible to switch between
backends at runtime. A QIviServiceObject is a handle, which the feature uses to connect to the
correct backend interface. This handle provides methods to query the backend interfaces available,
which the ServiceObject implements. ServiceObjects automatically wrap around plugins, making it
possible to share the ServiceObject between multiple features and to explicitly select which
backend to use for your feature instance.

\image app-serviceobject-backend.png "App / Backend Plugin Relation"

Based on the diagram above, the ServiceObject is the handle for a specific plugin. \b {Feature A}
and \b {Feature B} both use the same ServiceObject, which returns an instance of \b
Feature_A_Interface for \b {Feature A} and \b Feature_B_Interface for \b {Feature B}. The Feature
classes derive from QIviAbstractFeature; the backend interfaces derive from QIviFeatureInterface.

\section2 ProxyServiceObjects

In contrast to the normal QIviServiceObject, which represents a handle to a backend plugin, the
QIviProxyServiceObject doesn't need a plugin to work. It can be instantiated on the application
side and filled with any QIviFeatureInterface derived class. QIviProxyServiceObject is useful for
scenarios when a backend implementation of a feature should not be done inside a separate plugin,
but inside the application's code base itself.

\image proxyserviceobjects.png "ProxyServiceObjects"

ProxyServiceObjects are also used for models that are properties of another feature. For more
details, see \l{Models}.

\section1 How a Feature Finds its Backend

Typically, all Features use the auto discovery mode. From QML, you can set the
QIviAbstractFeature::discoveryMode property; from C++, you can start this with
QIviAbstractFeature::startAutoDiscovery(). This property asks the QIviServiceManager for all the
backends available, that implement the required interface for your feature. The manager then
chooses the first matching backend and connects the feature to it. QIviAbstractFeature always
asks for production backends first; if none are available, it falls back to a simulation backend.
This behavior can be controlled using the QIviAbstractFeature::discoveryMode, that defaults to
QIviAbstractFeature::AutoDiscovery. The resulting backend type can be retrieved via
QIviAbstractFeature::discoveryResult. After the feature has loaded a backend successfully, the
QIviAbstractFeature::serviceObject property holds the loaded ServiceObject and
QIviAbstractFeature::isValid returns \c true.

\section2 Detailed Connection Order

Based on the aforementioned climate control example, the detailed connection would be as follows:

\list 1
    \li A ClimateControl element is created in QML.
    \li ClimateControl calls QIviAbstractFeature::startAutoDiscovery upon completion.
    \li QIviAbstractFeature::startAutoDiscovery queries QIviServiceManager for all backends
        available.
    \li QIviServiceManager searches for all plugins available and the interfaces they implement;
        this search is only done once.
    \li QIviAbstractFeature accepts the first QIviServiceObject and connect to the corresponding
        interface.
    \li The ClimateControl element is ready to be used.
\endlist

\section2 Manual Assignment

If you don't want your feature to use the auto discovery mechanism, set the discoveryMode to
QIviAbstractFeature::NoAutoDiscovery. After that, the feature won't search for a backend anymore,
and you need to assign a ServiceObject manually.

\section2 DiscoveryModels

For features like the climate control example, the auto discovery mechanism is fitting, as there
is usually a 1:1 mapping between a feature and a backend providing the implementation for that
feature. For more generic interfaces like a media player, this might not be sufficient: you could
control a built-in media player backend with this, but you might also want to control the media
player running on your mobile phone over bluetooth.

For this to work, first, you would need to discover the devices available and then pass the
ServiceObject of the selected device to the media player interface. The discovery of the available
mobile phones can be done using a DiscoveryModel. This provides you with a ServiceObject for each
device found. The concept of a discovery model is not limited to mobile phones, it can be used for
all backends that are not hard wired to the system, like Internet services or controlling multiple
rearseat systems.

*/

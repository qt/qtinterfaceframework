// Copyright (C) 2021 The Qt Company Ltd.
// Copyright (C) 2019 Luxoft Sweden AB
// Copyright (C) 2018 Pelagicore AG
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only
/*!
\page interfaceframework-installation.html
\title Installation

Since the QtInterfaceFramework module uses the same \l{Qt Configure Options}{Configure System} as the rest of Qt,
you can do build-time configuration and enable only the features that you need.

\section1 Features Available

The following table describes the features available in the module. Similar to other modules, the
available features are auto-detected and displayed after the configuration step in the "Configure
summary".

\table
\header
    \li Feature
    \li Dependency
    \li Description
\row
    \li Interface Framework Generator
        \keyword feature-ifcodegen
    \li python3
        python3-virtualenv
    \li The Interface Framework Generator provides tooling to generate source
        code from Interface Definition Language (IDL) files. The Interface Framework
        Generator comes with a set of templates for specific code generation use cases.
\row
    \li QtRemoteObjects Support
        \keyword feature-qtremoteobjects
    \li QtRemoteObjects module
    \li The QtRemoteObjects Support is needed to generate \c interfaceframework back ends, using QtRemoteObjects
        for its Inter-Process Communication (IPC). This feature also provides templates to
        generate the server part of this IPC.
\endtable

The following are additional command-line options to tailor the build system according to your
needs:

\table
\header
    \li Command-line Option
    \li Description
\row
    \li --host-tools-only
    \li Only compiles the tools needed on the host to cross-compile for another target,
        for example, the Interface Framework Generator.
\row
    \li --ifcodegen <no|qt|system>
    \li \value no
               Disables the Interface Framework Generator feature completely.
        \value qt
               Enables the Interface Framework Generator feature; builds and packages the necessary files.
        \value system
               Enables the Interface Framework Generator feature, but uses the Interface Framework Generator-related files that are
               already available on the system. For example, from the native-interfaceframework package when you
               cross-compile inside Yocto.
\endtable

These command-line options can be passed to qmake using the \c QMAKE_EXTRA_ARGS environment variable:

\code
    QMAKE_EXTRA_ARGS="--host-tools-only" qmake <interfaceframework-src>/interfaceframework.pro
\endcode

\section2 Build the Required Features Only

By default, all QtInterfaceFramework modules are configured to be built, depending on whether all the required
dependencies are available for the respective module or not. Similar to other Qt features, you can
request for every module to be built or skip it explicitly using the \c{--[no-]feature-<modulename>}
argument, when you invoke \c qmake.

For example, to disable building QtInterfaceFramework Media:
\code
    QMAKE_EXTRA_ARGS="--no-feature-ifmedia" qmake <interfaceframework-src>/interfaceframework.pro
\endcode

Selecting the required module explicitly has the advantage that you can see any errors, at
configuration time, if not all dependencies are met.

\section1 General Build Process

To build QtInterfaceFramework modules, run the following commands:

\code
    qmake
    make
    make install
\endcode

*/

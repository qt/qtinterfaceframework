/****************************************************************************
**
** Copyright (C) 2021 The Qt Company Ltd.
** Copyright (C) 2019 Luxoft Sweden AB
** Copyright (C) 2018 Pelagicore AG
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
\page models.html
\title Models
\previouspage Dynamic Backend System
\nextpage Qt Interface Framework Query Language

To interact with lists in Qt applications, typically, you would use Qt's ListView classes, which
are based on the Model-View-Controller (MVC) pattern. Similarly, QtInterfaceFramework has the following classes
that support this use case, for you to provide your own models:

\list
   \li \l{if-abstract-feature-list-model}{QIfAbstractFeatureListModel}
   \li \l{if-paging-model}{QIfPagingModel}
   \li \l{if-search-and-browse-model}{QIfFilterAndBrowseModel}
\endlist

Apart from creating standalone models using one of classes mentioned above, you can also provide
\l{Models as properties of a QtInterfaceFramework Feature}{models that are properties of an existing feature}.

\target if-abstract-feature-list-model
\section1 QIfAbstractFeatureListModel

Suppose you have to design a feature like a Contact List in a connected Mobile Phone, you can use
QtInterfaceFramework's frontend/backend separation by derifng from QIfAbstractFeature. Then, you use your
subclass with a QAbstractItemView derived class to show your contacts in a list form.

QtInterfaceFramework provides \l{QIfAbstractFeatureListModel::QIfAbstractFeatureListModel}{QIfAbstractFeatureListModel}
for this use case. The class is derived from QAbstractListModel, but also provides all the
functionality from QIfAbstractFeature.

\target if-paging-model
\section1 QIfPagingModel

The \l{QIfPagingModel::QIfPagingModel}{QIfPagingModel} is a list model that uses the well-known
Pagination concept to only load content from the backend, when it is needed. This model provides
two different modes that determine when and how data should be retrieved and the number of items
to fetch in each stage.

\section2 Fetch Modes

Since we don't have control on the data providers' interfaces, the
\l{QIfPagingModel::QIfPagingModel}{QIfPagingModel} supports two fetch modes:

\list 1
\li If the number of items in the model is \b not known from the beginning, use the
    \l{QIfPagingModel::FetchMore}{FetchMore} mode. This mode fetches a number of items from the
    backend when they are needed; the backend tells the frontend whether there is more data to be
    fetched.

\li If the number of items in the model is \b known from the beginning, use the
    \l{QIfPagingModel::DataChanged}{DataChanged} mode. This mode fills the complete model with
    empty data and then uses the \l{QAbstractItemModel::dataChanged()} signal to tell the view
    about the actual content.
\endlist

For more details on fetch modes, see \l{QIfPagingModel::QIfPagingModel}{QIfPagingModel}.

\section2 Model Data

\l{QIfPagingModel::QIfPagingModel}{QIfPagingModel} provides a classic item-based approach to
working with the model; the items are provided by QIfStandardItem or classes derived from it. The
best way to provide data to the QIfPagingModel is to create a new class derived from
QIfStandardItem. Then, override the \c name() and \c type() accessor functions. The \c name and
\c type properties for each QIfStandardItem can be retrieved directly from the model's \c data()
function. This function also exposes those properties to delegates in item views, such as ListView.
In addition, the \l{QIfPagingModel::}{ItemRole} provides a const pointer to the QIfStandardItem
stored. Using \l{The Meta-Object System}, all the properties from the derived type are also
available in QML, directly, with this pointer. From C++, you can use the \c at() template function
to cast this const pointer directly to the type you need.

\target if-search-and-browse-model
\section1 QIfFilterAndBrowseModel

The \l{QIfFilterAndBrowseModel::QIfFilterAndBrowseModel}{QIfFilterAndBrowseModel} is derived
from the \l{QIfPagingModel::QIfPagingModel}{QIfPagingModel} to extends its functionality. This
class provides a model that supports searching through its content and browsing through a set of
model data.

\section2 Search: Filter and Sort

To filter and sort,
\l{QIfFilterAndBrowseModel::QIfFilterAndBrowseModel}{QIfFilterAndBrowseModel} uses the
\l{Qt Interface Framework Query Language}; this makes the system both flexible and powerful.

\section2 Browse

Although the Qt Interface Framework Query Language supports very complex queries, enabling you to filter content
in a list, it may not suit all use cases. With the query language, the frontend developer defines
which data is needed next. Sometimes, this is not possible, if the backend already has a fixed
browsing order. For example, a DLNA backend already specifies that an artist needs to be selected
first, only then is a list of all albums for that artist presented.

For this scenario, the {QIfFilterAndBrowseModel::QIfFilterAndBrowseModel}{QIfFilterAndBrowseModel}
provides some methods to navigate through the models:

\list
  \li \l{QIfFilterAndBrowseModel::canGoForward}{canGoForward(index)}
  \li \l{QIfFilterAndBrowseModel::goForward}{goForward(index)}
  \li \l{QIfFilterAndBrowseModel::canGoBack}{canGoBack()}
  \li \l{QIfFilterAndBrowseModel::goBack}{goBack()}
\endlist

\section2 Capabilities

You might not need all of the features above simultaneously; or your backend may not support all of
them. In this case, the QIfFilterAndBrowseModel has a capabilities feature where the backend
reports which capabilities it can support. Based on that information, only the supported
functionalities are enabled in the frontend API.

\section2 Modify the Content

{QIfFilterAndBrowseModel::QIfFilterAndBrowseModel}{QIfFilterAndBrowseModel} provides some
generic methods to modify the contents of the model:

\list
  \li \l{QIfFilterAndBrowseModel::insert}{insert()}
  \li \l{QIfFilterAndBrowseModel::remove}{remove()}
  \li \l{QIfFilterAndBrowseModel::move}{move()}
\endlist

\target models-as-properties
\section1 Models as Properties of a QtInterfaceFramework Feature

In some cases, you might need a model as a property of a specific QtInterfaceFramework Feature. A good example
is a MediaPlayer feature, where you provide the basic player functionality like the play state. In
addition you also want to provide the current play queue as a model to display it nicely inside a
ListView.

This play queue might be long, a vector or list is not a suitable container for it. Using the
{QIfPagingModel::QIfPagingModel}{QIfPagingModel} to only load the items, is a logical
conclusion.

As the {QIfPagingModel::QIfPagingModel}{QIfPagingModel} is a also a QtInterfaceFramework Feature, it has its
own backend interface which the backend plugin needs to implement.

\image models-as-properties.png

Each model property needs to map to a unique model interface implementation in the backend, as
each model is filled with different data and the data is requested at a different time.
Ultimately, every model instance needs to maintain its own state.

To implement this concept, we use the QIfProxyServiceObject to connect the
{QIfPagingModel::QIfPagingModel}{QIfPagingModel} instance provided with the correct backend
interface instance.

\image models-as-properties-details.png

For the MediaPlayer play queue example, we would implement the following:

\list a
    \li For the Backend
    \list 1
        \li Implement the QIfPagingModelInterface to retrieve the play queue items
        \li Implement the MediaPlayer feature interface and return a pointer to the
            QIfPagingModelInterface implementation for the play queue property
    \endlist

    \li For the Frontend
    \list 1
        \li Retrieve the QIfPagingModelInterface pointer from the backend
        \li Create a QIfProxyServiceObject that holds the QIfPagingModelInterface
        \li Create a \l{QIfPagingModel::QIfPagingModel}{QIfPagingModel} instance and set the
            QIfProxyServiceObject on it
        \li Return the \l{QIfPagingModel::QIfPagingModel}{QIfPagingModel} instance to the
            developer
    \endlist
\endlist

All these steps are already implemented in the Qt Interface Framework Generator, via \c model type for a
property in an \c interface.

*/

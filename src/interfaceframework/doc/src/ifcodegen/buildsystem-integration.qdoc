/****************************************************************************
**
** Copyright (C) 2021 The Qt Company Ltd.
** Copyright (C) 2019 Luxoft Sweden AB
** Copyright (C) 2018 Pelagicore AG
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
\page buildsystem-integration.html
\title Build System Integration
\previouspage Use the Generator

The Qt Interface Framework Generator is fully integrated in qmake and cmake to generate all or
part of a project.

In it's simplest form, qmake/cmake can generate all the source code and the project only needs to
configure the type of project to build.

For complex setups, you can combine generated code with application specific code to extend
and use the generated code.

\section2 QMake

Example:
\code
CONFIG += ifcodegen

QT_FOR_CONFIG += interfaceframework
!qtConfig(ifcodegen): error("No ifcodegen available")

IFCODEGEN_TEMPLATE = frontend
IFCODEGEN_SOURCES = example.qface
IFCODEGEN_MODULE_NAME = myModule
IFCODEGEN_OUTPUT_DIR = myOutputDir
IFCODEGEN_ANNOTATIONS = annotation.yaml
\endcode

The following qmake variables are available:
\table
    \row
        \li IFCODEGEN_TEMPLATE
        \li frontend (default), simulator_backend
    \row
        \li IFCODEGEN_SOURCES
        \li A single \c .qface input file.
    \row
        \li IFCODEGEN_MODULE_NAME
        \li Optional. The name of the module that is using the generated code.
    \row
        \li IFCODEGEN_OUTPUT_DIR
        \li The output folder where the generated code is placed. The default location is the
            current build folder.
    \row
        \li IFCODEGEN_ANNOTATIONS
        \li A list of additional annotation files in YAML format. For more information, see the
            \l{annotations-option}{Annotations Option}.
    \row
        \li IFCODEGEN_IMPORT_PATH
        \li A list of import paths, which are considered when an IDL file uses an import statement.
            For more information, see the \l{import-option}{Import Option}.
\endtable

For more details on the generator's command line arguments, see \l {Use the Generator}.

\quotation
\note Since the \c ifcodegen has specific system dependencies, it may not be available in all
      QtInterfaceFramework installation. In this case, the \c ifcodegen qmake feature is also not
      available and this can result in build errors.

In this case, use the following code snippet that makes sure the build stops and provides a
meaningful error message:

\code
QT_FOR_CONFIG += interfaceframework
!qtConfig(ifcodegen): error("No ifcodegen available")
\endcode
\endquotation

\section2 CMake

In CMake the following functions and variables are provided by the QtInterfaceFramework package.

\section3 Variables
\annotatedlist cmake-variables-qtinterfaceframework

\section3 Commands
\annotatedlist cmake-macros-qtinterfaceframework

\section1 QtModule Support

\section2 QMake

The  integration also supports generating code that you can subsequently compile into a Qt
module. Since this module needs to work more closely with Qt's module building system, it shouldn't
be loaded using the \c CONFIG variable, but using the \c load() function instead. The
\c ifcodegen_qt_module feature replaces the \c load(qt_module) call.

The following shows how you can integrate the QtIfVehicleFunctions module:

\badcode
TARGET = QtIfVehicleFunctions
QT = core core-private interfaceframework
CONFIG += c++11 ifcodegen

QT_FOR_CONFIG += interfaceframework
!qtConfig(ifcodegen): error("No ifcodegen available")

...

IFCODEGEN_MODULE_NAME = QtIfVehicleFunctions
IFCODEGEN_SOURCES += ifvehiclefunctions.qface

load(ifcodegen_qt_module)
\endcode

\section2 CMake

The following shows how you can use cmake to build the QtIfVehicleFunctions module:

\badcode
qt_ifcodegen_generate(
    IDL_FILES ifvehiclefunctions.qface
    TEMPLATE frontend
    MODULE_NAME QtIfVehicleFunctions
)

qt_internal_add_module(IfVehicleFunctions
    LIBRARIES
        Qt::CorePrivate
        Qt::InterfaceFrameworkPrivate
    PUBLIC_LIBRARIES
        Qt::Core
        Qt::InterfaceFramework
    PRIVATE_MODULE_INTERFACE
        Qt::CorePrivate
        Qt::InterfaceFrameworkPrivate
)

qt_ifcodegen_extend_target(IfVehicleFunctions
    NO_GENERATE
    IDL_FILES ifvehiclefunctions.qface
)
\endcode

Before defining the module, the code needs to be generated as it has to be available
for syncqt at this point. Afterwards the generated code is used to extend the module target.

\section3 SyncQt

In addition to the project file for the module library, the \c sync.profile also needs to be
changed, as it's used to call the \c syncqt.pl script that generates the forwarding headers.
Usually, the \c sync.profile is setup to search for these headers in the source folders. Using
\c $out_basedir, you can also extend the script to search in the build folder.

\badcode
...
%modules = ( # path to module name map
    "QtIfVehicleFunctions" => "$basedir/src/ifvehiclefunctions;$out_basedir/src/ifvehiclefunctions"
);
...
\endcode

*/

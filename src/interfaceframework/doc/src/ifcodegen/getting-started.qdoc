// Copyright (C) 2021 The Qt Company Ltd.
// Copyright (C) 2019 Luxoft Sweden AB
// Copyright (C) 2018 Pelagicore AG
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only
/*!
\page get-started-ifcodegen.html
\title Get Started with the Qt Interface Framework Generator

This topic explains how to get started with the Qt Interface Framework Generator. The generator can generate
source code from an Interface Definition Language (IDL) file. The kind of code to generate is
determined by the template that you select.

The Qt Interface Framework Generator is located in the \c{libexec/ifcodegen} folder of your Qt installation. If it is not
available, make sure that your configuration meets all of the prerequisites listed in the
qmake configuration summary. For more details on how to configure Qt Interface Framework, see \l {Configuration}.

\section1 Basics

The generator takes an IDL file as input to generate its source code. The code snippet below
shows a minimal IDL file:

\code
module my.idl 1.0

interface MyInterface {
    property int value;
    void increment();
    signal valueIncremented(int newValue);
}
\endcode

The IDL defines a new module or namespace, \c my.idl, in version \c 1.0. Inside, there is an
interface called \c MyInterface, providing a property that stores a value and a function to
increment and notify the user. Refer to the \l {QFace IDL syntax} for complete documentation on
the IDL.

Using the previously defined IDL file, the \l {frontend-template}{frontend} template can generate
a library providing an implementation of \c MyInterface. The generated class uses the
\l {Dynamic Backend System} provided by Qt Interface Framework for an abstraction of \c frontend and \c backend
code.

The implementation for the class behavior is done inside a \c backend plugin. A basic backend
plugin can be generated by using the \l {backend-simulator-template}{backend simulator} template.
For more information on how Qt locates and loads its plugins, see \l {How to Create Qt Plugins}.

\section1 In-Depth Walkthrough

For an in-depth walkthrough, see the \l {Qt Interface Framework Generator Tutorial}, which contains step by
step instructions on how to use the Qt Interface Framework module to generate a Middlware API based on a QML
application.
*/

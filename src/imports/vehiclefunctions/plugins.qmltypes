import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtIvi.VehicleFunctions 1.0'

Module {
    dependencies: ["QtQuick 2.8"]
    Component {
        name: "QIviAbstractFeature"
        prototype: "QObject"
        Enum {
            name: "Error"
            values: {
                "NoError": 0,
                "PermissionDenied": 1,
                "InvalidOperation": 2,
                "Timeout": 3,
                "InvalidZone": 4,
                "Unknown": 5
            }
        }
        Enum {
            name: "DiscoveryMode"
            values: {
                "NoAutoDiscovery": 0,
                "AutoDiscovery": 1,
                "LoadOnlyProductionBackends": 2,
                "LoadOnlySimulationBackends": 3
            }
        }
        Enum {
            name: "DiscoveryResult"
            values: {
                "NoResult": 0,
                "ErrorWhileLoading": 1,
                "ProductionBackendLoaded": 2,
                "SimulationBackendLoaded": 3
            }
        }
        Property { name: "discoveryMode"; type: "QIviAbstractFeature::DiscoveryMode" }
        Property {
            name: "discoveryResult"
            type: "QIviAbstractFeature::DiscoveryResult"
            isReadonly: true
        }
        Property { name: "serviceObject"; type: "QIviServiceObject"; isPointer: true }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Property { name: "isInitialized"; type: "bool"; isReadonly: true }
        Property { name: "error"; type: "string"; isReadonly: true }
        Signal {
            name: "discoveryModeChanged"
            Parameter { name: "discoveryMode"; type: "QIviAbstractFeature::DiscoveryMode" }
        }
        Signal {
            name: "discoveryResultChanged"
            Parameter { name: "discoveryResult"; type: "QIviAbstractFeature::DiscoveryResult" }
        }
        Signal {
            name: "isValidChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "isInitializedChanged"
            Parameter { name: "isInitialized"; type: "bool" }
        }
        Signal {
            name: "errorChanged"
            Parameter { name: "error"; type: "QIviAbstractFeature::Error" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "setServiceObject"
            type: "bool"
            Parameter { name: "so"; type: "QIviServiceObject"; isPointer: true }
        }
        Method {
            name: "setDiscoveryMode"
            Parameter { name: "discoveryMode"; type: "QIviAbstractFeature::DiscoveryMode" }
        }
        Method { name: "startAutoDiscovery"; type: "QIviAbstractFeature::DiscoveryResult" }
    }
    Component {
        name: "QIviAbstractZonedFeature"
        prototype: "QIviAbstractFeature"
        Property { name: "zone"; type: "string" }
        Property { name: "availableZones"; type: "QStringList"; isReadonly: true }
        Property { name: "zones"; type: "QVariantList"; isReadonly: true }
        Property { name: "zoneAt"; type: "QVariantMap"; isReadonly: true }
        Signal {
            name: "availableZonesChanged"
            Parameter { name: "zones"; type: "QStringList" }
        }
    }
    Component {
        name: "QIviClimateControl"
        prototype: "QIviAbstractZonedFeature"
        exports: ["QtIvi.VehicleFunctions/ClimateControl 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "airConditioningEnabled"; type: "bool" }
        Property { name: "heaterEnabled"; type: "bool" }
        Property { name: "fanSpeedLevel"; type: "int" }
        Property { name: "steeringWheelHeater"; type: "int" }
        Property { name: "targetTemperature"; type: "double" }
        Property { name: "seatCooler"; type: "int" }
        Property { name: "seatHeater"; type: "int" }
        Property { name: "outsideTemperature"; type: "int" }
        Property { name: "outsideTemperatureLabel"; type: "string" }
        Property { name: "zoneSynchronizationEnabled"; type: "bool" }
        Property { name: "defrostEnabled"; type: "bool" }
        Property { name: "recirculationMode"; type: "QtIviVehicleFunctionsModule::RecirculationMode" }
        Property { name: "recirculationEnabled"; type: "bool" }
        Property { name: "recirculationSensitivityLevel"; type: "int" }
        Property { name: "climateMode"; type: "QtIviVehicleFunctionsModule::ClimateMode" }
        Property { name: "automaticClimateFanIntensityLevel"; type: "int" }
        Property { name: "airflowDirections"; type: "QtIviVehicleFunctionsModule::AirflowDirections" }
        Signal {
            name: "airConditioningEnabledChanged"
            Parameter { name: "airConditioningEnabled"; type: "bool" }
        }
        Signal {
            name: "heaterEnabledChanged"
            Parameter { name: "heaterEnabled"; type: "bool" }
        }
        Signal {
            name: "fanSpeedLevelChanged"
            Parameter { name: "fanSpeedLevel"; type: "int" }
        }
        Signal {
            name: "steeringWheelHeaterChanged"
            Parameter { name: "steeringWheelHeater"; type: "int" }
        }
        Signal {
            name: "targetTemperatureChanged"
            Parameter { name: "targetTemperature"; type: "double" }
        }
        Signal {
            name: "seatCoolerChanged"
            Parameter { name: "seatCooler"; type: "int" }
        }
        Signal {
            name: "seatHeaterChanged"
            Parameter { name: "seatHeater"; type: "int" }
        }
        Signal {
            name: "outsideTemperatureChanged"
            Parameter { name: "outsideTemperature"; type: "int" }
        }
        Signal {
            name: "outsideTemperatureLabelChanged"
            Parameter { name: "outsideTemperatureLabel"; type: "string" }
        }
        Signal {
            name: "zoneSynchronizationEnabledChanged"
            Parameter { name: "zoneSynchronizationEnabled"; type: "bool" }
        }
        Signal {
            name: "defrostEnabledChanged"
            Parameter { name: "defrostEnabled"; type: "bool" }
        }
        Signal {
            name: "recirculationModeChanged"
            Parameter { name: "recirculationMode"; type: "QtIviVehicleFunctionsModule::RecirculationMode" }
        }
        Signal {
            name: "recirculationEnabledChanged"
            Parameter { name: "recirculationEnabled"; type: "bool" }
        }
        Signal {
            name: "recirculationSensitivityLevelChanged"
            Parameter { name: "recirculationSensitivityLevel"; type: "int" }
        }
        Signal {
            name: "climateModeChanged"
            Parameter { name: "climateMode"; type: "QtIviVehicleFunctionsModule::ClimateMode" }
        }
        Signal {
            name: "automaticClimateFanIntensityLevelChanged"
            Parameter { name: "automaticClimateFanIntensityLevel"; type: "int" }
        }
        Signal {
            name: "airflowDirectionsChanged"
            Parameter { name: "airflowDirections"; type: "QtIviVehicleFunctionsModule::AirflowDirections" }
        }
        Method {
            name: "setAirConditioningEnabled"
            Parameter { name: "airConditioningEnabled"; type: "bool" }
        }
        Method {
            name: "setHeaterEnabled"
            Parameter { name: "heaterEnabled"; type: "bool" }
        }
        Method {
            name: "setFanSpeedLevel"
            Parameter { name: "fanSpeedLevel"; type: "int" }
        }
        Method {
            name: "setSteeringWheelHeater"
            Parameter { name: "steeringWheelHeater"; type: "int" }
        }
        Method {
            name: "setTargetTemperature"
            Parameter { name: "targetTemperature"; type: "double" }
        }
        Method {
            name: "setSeatCooler"
            Parameter { name: "seatCooler"; type: "int" }
        }
        Method {
            name: "setSeatHeater"
            Parameter { name: "seatHeater"; type: "int" }
        }
        Method {
            name: "setOutsideTemperature"
            Parameter { name: "outsideTemperature"; type: "int" }
        }
        Method {
            name: "setOutsideTemperatureLabel"
            Parameter { name: "outsideTemperatureLabel"; type: "string" }
        }
        Method {
            name: "setZoneSynchronizationEnabled"
            Parameter { name: "zoneSynchronizationEnabled"; type: "bool" }
        }
        Method {
            name: "setDefrostEnabled"
            Parameter { name: "defrostEnabled"; type: "bool" }
        }
        Method {
            name: "setRecirculationMode"
            Parameter { name: "recirculationMode"; type: "QtIviVehicleFunctionsModule::RecirculationMode" }
        }
        Method {
            name: "setRecirculationEnabled"
            Parameter { name: "recirculationEnabled"; type: "bool" }
        }
        Method {
            name: "setRecirculationSensitivityLevel"
            Parameter { name: "recirculationSensitivityLevel"; type: "int" }
        }
        Method {
            name: "setClimateMode"
            Parameter { name: "climateMode"; type: "QtIviVehicleFunctionsModule::ClimateMode" }
        }
        Method {
            name: "setAutomaticClimateFanIntensityLevel"
            Parameter { name: "automaticClimateFanIntensityLevel"; type: "int" }
        }
        Method {
            name: "setAirflowDirections"
            Parameter { name: "airflowDirections"; type: "QtIviVehicleFunctionsModule::AirflowDirections" }
        }
    }
    Component {
        name: "QIviWindowControl"
        prototype: "QIviAbstractZonedFeature"
        exports: ["QtIvi.VehicleFunctions/WindowControl 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "heaterMode"; type: "QtIviVehicleFunctionsModule::HeaterMode" }
        Property { name: "heater"; type: "bool"; isReadonly: true }
        Property { name: "state"; type: "QtIviVehicleFunctionsModule::WindowState"; isReadonly: true }
        Property { name: "blindMode"; type: "QtIviVehicleFunctionsModule::BlindMode" }
        Property {
            name: "blindState"
            type: "QtIviVehicleFunctionsModule::WindowState"
            isReadonly: true
        }
        Signal {
            name: "heaterModeChanged"
            Parameter { name: "heaterMode"; type: "QtIviVehicleFunctionsModule::HeaterMode" }
        }
        Signal {
            name: "heaterChanged"
            Parameter { name: "heater"; type: "bool" }
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "QtIviVehicleFunctionsModule::WindowState" }
        }
        Signal {
            name: "blindModeChanged"
            Parameter { name: "blindMode"; type: "QtIviVehicleFunctionsModule::BlindMode" }
        }
        Signal {
            name: "blindStateChanged"
            Parameter { name: "blindState"; type: "QtIviVehicleFunctionsModule::WindowState" }
        }
        Method { name: "open" }
        Method { name: "close" }
        Method {
            name: "setHeaterMode"
            Parameter { name: "heaterMode"; type: "QtIviVehicleFunctionsModule::HeaterMode" }
        }
        Method {
            name: "setBlindMode"
            Parameter { name: "blindMode"; type: "QtIviVehicleFunctionsModule::BlindMode" }
        }
    }
}

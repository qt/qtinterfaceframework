import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtIvi 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "QIviAbstractFeature"
        prototype: "QObject"
        exports: ["QtIvi/AbstractFeature 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Error"
            values: {
                "NoError": 0,
                "PermissionDenied": 1,
                "InvalidOperation": 2,
                "Timeout": 3,
                "InvalidZone": 4,
                "Unknown": 5
            }
        }
        Enum {
            name: "DiscoveryMode"
            values: {
                "NoAutoDiscovery": 0,
                "AutoDiscovery": 1,
                "LoadOnlyProductionBackends": 2,
                "LoadOnlySimulationBackends": 3
            }
        }
        Enum {
            name: "DiscoveryResult"
            values: {
                "NoResult": 0,
                "ErrorWhileLoading": 1,
                "ProductionBackendLoaded": 2,
                "SimulationBackendLoaded": 3
            }
        }
        Property { name: "discoveryMode"; type: "QIviAbstractFeature::DiscoveryMode" }
        Property {
            name: "discoveryResult"
            type: "QIviAbstractFeature::DiscoveryResult"
            isReadonly: true
        }
        Property { name: "serviceObject"; type: "QIviServiceObject"; isPointer: true }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Property { name: "isInitialized"; type: "bool"; isReadonly: true }
        Property { name: "error"; type: "string"; isReadonly: true }
        Signal {
            name: "discoveryModeChanged"
            Parameter { name: "discoveryMode"; type: "QIviAbstractFeature::DiscoveryMode" }
        }
        Signal {
            name: "discoveryResultChanged"
            Parameter { name: "discoveryResult"; type: "QIviAbstractFeature::DiscoveryResult" }
        }
        Signal {
            name: "isValidChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "isInitializedChanged"
            Parameter { name: "isInitialized"; type: "bool" }
        }
        Signal {
            name: "errorChanged"
            Parameter { name: "error"; type: "QIviAbstractFeature::Error" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "setServiceObject"
            type: "bool"
            Parameter { name: "so"; type: "QIviServiceObject"; isPointer: true }
        }
        Method {
            name: "setDiscoveryMode"
            Parameter { name: "discoveryMode"; type: "QIviAbstractFeature::DiscoveryMode" }
        }
        Method { name: "startAutoDiscovery"; type: "QIviAbstractFeature::DiscoveryResult" }
    }
    Component {
        name: "QIviAbstractFeatureListModel"
        prototype: "QAbstractListModel"
        Property { name: "discoveryMode"; type: "QIviAbstractFeature::DiscoveryMode" }
        Property {
            name: "discoveryResult"
            type: "QIviAbstractFeature::DiscoveryResult"
            isReadonly: true
        }
        Property { name: "serviceObject"; type: "QIviServiceObject"; isPointer: true }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Property { name: "isInitialized"; type: "bool"; isReadonly: true }
        Property { name: "error"; type: "string"; isReadonly: true }
        Signal {
            name: "discoveryModeChanged"
            Parameter { name: "discoveryMode"; type: "QIviAbstractFeature::DiscoveryMode" }
        }
        Signal {
            name: "discoveryResultChanged"
            Parameter { name: "discoveryResult"; type: "QIviAbstractFeature::DiscoveryResult" }
        }
        Signal {
            name: "isValidChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "isInitializedChanged"
            Parameter { name: "isInitialized"; type: "bool" }
        }
        Signal {
            name: "errorChanged"
            Parameter { name: "error"; type: "QIviAbstractFeature::Error" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "setServiceObject"
            type: "bool"
            Parameter { name: "so"; type: "QIviServiceObject"; isPointer: true }
        }
        Method {
            name: "setDiscoveryMode"
            Parameter { name: "discoveryMode"; type: "QIviAbstractFeature::DiscoveryMode" }
        }
        Method { name: "startAutoDiscovery"; type: "QIviAbstractFeature::DiscoveryResult" }
    }
    Component {
        name: "QIviAbstractZonedFeature"
        prototype: "QIviAbstractFeature"
        exports: ["QtIvi/AbstractZonedFeature 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "zone"; type: "string" }
        Property { name: "availableZones"; type: "QStringList"; isReadonly: true }
        Property { name: "zones"; type: "QVariantList"; isReadonly: true }
        Property { name: "zoneAt"; type: "QVariantMap"; isReadonly: true }
        Signal {
            name: "availableZonesChanged"
            Parameter { name: "zones"; type: "QStringList" }
        }
    }
    Component {
        name: "QIviPagingModel"
        prototype: "QIviAbstractFeatureListModel"
        exports: ["QtIvi/PagingModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "LoadingType"
            values: {
                "FetchMore": 0,
                "DataChanged": 1
            }
        }
        Property { name: "capabilities"; type: "QtIviCoreModule::ModelCapabilities"; isReadonly: true }
        Property { name: "chunkSize"; type: "int" }
        Property { name: "fetchMoreThreshold"; type: "int" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "loadingType"; type: "QIviPagingModel::LoadingType" }
        Signal {
            name: "capabilitiesChanged"
            Parameter { name: "capabilities"; type: "QtIviCoreModule::ModelCapabilities" }
        }
        Signal {
            name: "chunkSizeChanged"
            Parameter { name: "chunkSize"; type: "int" }
        }
        Signal {
            name: "fetchMoreThresholdChanged"
            Parameter { name: "fetchMoreThreshold"; type: "int" }
        }
        Signal { name: "fetchMoreThresholdReached" }
        Signal {
            name: "loadingTypeChanged"
            Parameter { name: "loadingType"; type: "QIviPagingModel::LoadingType" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "reload" }
    }
    Component {
        name: "QIviSearchAndBrowseModel"
        prototype: "QIviPagingModel"
        exports: ["QtIvi/SearchAndBrowseModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "NavigationType"
            values: {
                "InModelNavigation": 0,
                "OutOfModelNavigation": 1
            }
        }
        Property { name: "query"; type: "string" }
        Property { name: "contentType"; type: "string" }
        Property { name: "availableContentTypes"; type: "QStringList"; isReadonly: true }
        Property { name: "canGoBack"; type: "bool"; isReadonly: true }
        Signal {
            name: "queryChanged"
            Parameter { name: "query"; type: "string" }
        }
        Signal {
            name: "contentTypeChanged"
            Parameter { name: "contentType"; type: "string" }
        }
        Signal {
            name: "availableContentTypesChanged"
            Parameter { name: "availableContentTypes"; type: "QStringList" }
        }
        Signal {
            name: "canGoBackChanged"
            Parameter { name: "canGoBack"; type: "bool" }
        }
        Method { name: "goBack" }
        Method {
            name: "canGoForward"
            type: "bool"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "goForward"
            type: "QIviSearchAndBrowseModel*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "navigationType"; type: "QIviSearchAndBrowseModel::NavigationType" }
        }
        Method {
            name: "insert"
            type: "QIviPendingReply<void>"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "variant"; type: "QVariant" }
        }
        Method {
            name: "remove"
            type: "QIviPendingReply<void>"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "move"
            type: "QIviPendingReply<void>"
            Parameter { name: "cur_index"; type: "int" }
            Parameter { name: "new_index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "QIviPendingReply<int>"
            Parameter { name: "variant"; type: "QVariant" }
        }
    }
    Component {
        name: "QIviServiceManager"
        prototype: "QAbstractListModel"
        exports: ["QtIvi/ServiceManager 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SearchFlags"
            values: {
                "IncludeProductionBackends": 1,
                "IncludeSimulationBackends": 2,
                "IncludeAll": 3
            }
        }
        Enum {
            name: "BackendType"
            values: {
                "ProductionBackend": 0,
                "SimulationBackend": 1
            }
        }
        Method {
            name: "findServiceByInterface"
            type: "QList<QIviServiceObject*>"
            Parameter { name: "interface"; type: "string" }
            Parameter { name: "searchFlags"; type: "SearchFlags" }
        }
        Method {
            name: "findServiceByInterface"
            type: "QList<QIviServiceObject*>"
            Parameter { name: "interface"; type: "string" }
        }
        Method {
            name: "hasInterface"
            type: "bool"
            Parameter { name: "interface"; type: "string" }
        }
    }
    Component {
        name: "QtIviCoreModule"
        prototype: "QObject"
        exports: ["QtIvi/QtIviCoreModule 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ModelCapabilities"
            values: {
                "NoExtras": 0,
                "SupportsGetSize": 1,
                "SupportsFiltering": 2,
                "SupportsSorting": 4,
                "SupportsAndConjunction": 8,
                "SupportsOrConjunction": 16,
                "SupportsStatelessNavigation": 32,
                "SupportsInsert": 64,
                "SupportsMove": 128,
                "SupportsRemove": 256
            }
        }
    }
}

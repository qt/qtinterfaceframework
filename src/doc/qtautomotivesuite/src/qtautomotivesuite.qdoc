/****************************************************************************
**
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Automotive Suite.
**
** $QT_BEGIN_LICENSE:FDL-QTAS$
** Commercial License Usage
** Licensees holding valid commercial Qt Automotive Suite licenses may use
** this file in accordance with the commercial license agreement provided
** with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and The Qt Company.  For
** licensing terms and conditions see https://www.qt.io/terms-conditions.
** For further information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qtautomotive-index.html
    \title Qt Automotive Suite
    \nextpage {Qt Automotive Suite Overview}{Overview}

    \e {\QAS} is a collection of software components and tools to enable
    development of \e In-Vehicle-Infotainment (IVI) systems. Built on top
    of the \l {Qt for Device Creation} offering and compliant with the
    \l GENIVI automotive platform architecture, \QAS includes an embedded
    development environment with additional tools for rapid UI development,
    as well as application introspection and debugging.

    \QAS comes with libraries and ready-made components, as well as hardware
    adaptation APIs for creating full-featured IVI solutions. In addition,
    it includes a reference UI for embedded platforms, and reference
    IVI applications and application store implementations.

    \section1 Contents

    \include qtas-common.qdocinc qtas contents

    \section1 Components

    \list
        \li \l {Qt for Device Creation}
        \li \l {Qt GENIVI Extras}{Qt GENIVI Extras Module Reference Documentation}
        \li \l {Qt IVI}{Qt IVI Module Reference Documentation}
        \li \l {Qt Application Manager}
        \li \l {Qt QmlLive}
        \li \l {Qt Safe Renderer}
        \li \l {Qt 3D Studio}
        \li \l {Qt Creator Application Manager Plugin}
        \li \l {Neptune 3 UI}{Reference UI (Neptune 3 UI)}
        \li \l {GammaRay}
    \endlist
*/

/*!
    \page qtas-overview.html
    \title Qt Automotive Suite Overview
    \previouspage {Qt Automotive Suite}
    \nextpage {Installing Qt Automotive Suite}

    \QAS includes several components built on Qt and the \l {Qt Creator}
    integrated development environment. The following picture illustrates
    the structure and environment of \QAS. The parts outlined in grey are
    specific to \QAS:

    \image qtas-architecture.png

    \section1 Qt and Qt for Device Creation

    \QAS is built on top of the \l {Qt for Device Creation} offering.
    In addition to Qt, Qt for Device Creation contains an embedded development
    environment built around Qt Creator. Especially, Qt for Device Creation provides
    Boot to Qt, a light-weight software stack for embedded systems. It supports
    building your own Linux image for customizing the Boot to Qt stack.

    Qt is a cross-platform \l {http://www.qt.io/}{Qt} development framework
    that provides libraries and core tools, developed through an open-source
    collaboration model. Qt is designed to streamline the creation of
    applications and user interfaces for desktop, embedded, and mobile
    platforms.

    The Qt libraries provide high-level APIs for a large variety of both
    non-GUI and GUI related functionality. For UI creation, Qt provides a
    number of approaches: traditional C++, declarative UI design with
    \l {Qt Quick} or HTML5/hybrid user interfaces with the \l {Qt WebEngine}
    module.

    For an overview of Qt libraries, see the \l {Qt Reference Documentation}.

    Qt modules that are especially useful for embedded and IVI application
    development include:

    \list
        \li \l {Qt Virtual Keyboard} - complete virtual keyboard solution with
            word-prediction and multiple languages supported.
        \li \l {Qt Quick Controls 2} - provides a set of controls for building
            complete user interfaces in Qt Quick.
        \li \l {Qt Quick Compiler} - enables compiling .qml source files into
            application binaries, improving load times and security for code
            assets.
        \li \l {Qt WebEngine} - provides a web browser engine based on the
            \l {http://www.chromium.org}{Chromium} project.
    \endlist

    \section1 Development Environment

    The development environment in \QAS is built around \l {Qt Creator}.
    The following topics provide more information about Qt Creator as a
    development environment:

    \list
      \li \l {Qt Creator: Developing Qt Quick Applications}
      \li \l {Qt Creator: Analyzing Code}
      \li \l {Qt Creator: Debugging}
    \endlist

    \QAS comes with additional functionality for diagnostics and debugging,
    as well as deployment:

    \section1 GammaRay

    GammaRay is a plugin for Qt Creator that provides software introspection
    for Qt applications. It allows visualization of application behavior and
    manipulating it at run-time, both locally and remotely on an embedded
    target.

    \section1 QmlLive

    \l{Qt QmlLive}{QmlLive} provides a live reloader environment for rapid development of
    Qt Quick applications, dramatically reducing the time it takes to
    deploy and test changes in the UI design.

    \section1 Qt Safe Renderer

    The \l{Qt Safe Renderer} module provides a UI rendering component that can be
    used to render safety-critical items, such as warning indicators, in
    functional safety systems. Qt Safe Renderer separates the safety-critical
    rendering from the other parts of the system. This ensures that
    Qt Safe Renderer is able to render the safety-critical UI elements even if
    there are failures in the main UI. With separation, Qt can be used in a
    system requiring certification without changing the Qt libraries.

    \section1 Qt 3D Studio

    \l{Qt 3D Studio} is an artist-centric tool designed for designing and
    building rich interactive interfaces. Though there is a strong emphasis on
    3D content - all objects are placed in three dimensional space - it is not
    a 3D content creation tool. It is also not a drawing program, though it uses
    2D images and vectors heavily. Studio is a compositing tool.

    You can create your 2D, 3D, and script assets in other programs and
    then use Qt 3D Studio to place them in your presentation.

    \section1 Deployment

    Device deployment can be done directly from the Qt Creator IDE to a
    device connected via USB or local area network, or to an \l{Emulator}{emulator}
    running the same, full software stack as the devices.

    As with any Qt application, the same project can be deployed to
    desktop or target devices as well.

    \section1 Automotive APIs

    The \l {Qt IVI} module provides C++ and QML interfaces for accessing
    vehicle features, and also enables implementing new IVI features.
    Already defined interfaces from the GENIVI alliance are exposed in the
    \l {Qt GENIVI Extras} module.

    \section1 Qt Application Manager

    \l {Qt Application Manager} provides a basis for a multi-application
    embedded system. It takes care of the application lifecycle management.
    Qt Application Manager provides an API for implementing a UI and its application
    logic separately.

    Qt Creator contains a
    \l{Qt Creator Application Manager Plugin}{Qt Application Manager} plugin
    that facilitates the development of 3rd party applications within
    a Qt Application Manager setup by automating the underlying processes.

    \section1 Reference Applications

    \QAS includes \l{Neptune 3 UI} that provides a UI implementation for
    Qt in IVI (In-Vehichle Infotainment) systems. It demonstrates best practices
    for developing an automotive UI with \QAS.

*/

/*!
    \page qtas-install.html
    \title Installing Qt Automotive Suite
    \previouspage {Qt Automotive Suite Overview}{Overview}
    \nextpage qtas-preparing-hardware-drivecx.html

    \QAS is a commercial product and requires a license to install and
    explore its possibilities. Use the guide on the
    \l{Download Qt} page to find the license that suits your need. The license you
    buy is associated with a Qt Account, which is required to install the product.

    \section1 Supported Target Devices and Development Hosts

    \l {Supported Target Devices} lists the target devices supported by \QAS.

    \l {Supported Development Hosts} lists the development hosts supported by \QAS.

    \section1 Prerequisites

    \QAS is based on the \l {Qt for Device Creation} offering so the
    prerequisites are the same for both. For more information about how to install and
    configure these prerequisites on your development host, see
    \l {Requirements for Linux/X11} and \l {Requirements for Windows}.

    \section2 \QAS Prerequisites

    The DriveCX support in \B2Q requires Vibrante 4.1 Linux Drive CX2
    PDK version 4.1.4.0.

    \section1 Installing \QAS

    \list 1
     \li Download the \l{Qt Online Installer Download}{Qt online installer}.

     \note On Linux, the installer needs executable permissions before you
     can run it.

     \li Run the installer and select \uicontrol Next to get to the Qt account
     section.

     \li Enter your Qt account credentials and select \uicontrol Next to run
     a license check against the Qt account.

     \li Select \uicontrol Next again to choose an install path.

     \li Select \uicontrol Next to see available packages to install from.

     \li Select \b{Qt Automotive Suite} and at least one \b Qt version
     (v5.7 or later) from the list, and follow the instructions to complete
     the installation.

     \borderedimage qtinstaller-qas.png
    \endlist

    \section1 Installing \B2Q on Target Devices

    Before you can test \QAS applications on the target device, you must
    flash the target device with an image containing the \B2Q stack. Follow the
    steps in the target device guide:

    \list
        \li \l{NVIDIA DRIVE CX Guide}
    \endlist

    Once the installation is complete, start Qt Creator and try running one of the
    examples against an automotive target or the Qt Automotive emulator.
*/

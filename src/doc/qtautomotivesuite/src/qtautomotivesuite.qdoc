/****************************************************************************
**
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Automotive Suite.
**
** $QT_BEGIN_LICENSE:FDL-QTAS$
** Commercial License Usage
** Licensees holding valid commercial Qt Automotive Suite licenses may use
** this file in accordance with the commercial license agreement provided
** with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and The Qt Company.  For
** licensing terms and conditions see https://www.qt.io/terms-conditions.
** For further information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qtautomotive-index.html
    \title Qt Automotive Suite
    \nextpage {Install Qt Automotive Suite}

    The Qt Automotive Suite is a collection of software components and tools that enable you to
    develop In-Vehicle-Infotainment (IVI) systems. Built on top of the \l {Qt for Device Creation}
    offering, Qt Automotive Suite includes an embedded development environment with additional
    tools for rapid UI development, as well as application introspection and debugging. The
    \l{Qt GENIVI Extras} module help to make your Qt Automotive Suite-based product compliant with
    the \l GENIVI automotive platform architecture.

    Qt Automotive Suite comprises of several components built on Qt and \l {Qt Creator}.

    The following diagram illustrates the structure and environment.

    \image qtas-architecture.png

    \section1 Components and Tools

    Qt Automotive Suite comes with components and tools that assist you to develop, deploy, diagnose,
    and debug your system.

    \table 100%
        \header
            \li {2,1}Components
        \row
            \li \l{Qt Application Manager}
            \li Provides the basis for a multi-application embedded system. This module takes care
                of the application lifecycle management. It provides an API to implement a UI and
                its application logic separately. This module also provides a high-level
                compositing API to simplify the development of a System UI and use of these
                features in applications.
        \row
            \li \l{Qt IVI}
            \li Provides C++ and QML interfaces to access vehicle features and infotainment
                middleware. Also enables you to auto-generate code to implement new IVI features.
        \row
            \li \l{Neptune 3 UI}{Reference UI}
            \li Provides a reference UI implementation for Qt in In-Vehicle Infotainment (IVI)
                systems; demonstrates the best practices for developing an automotive UI. The
                current version is known as Neptune 3 UI.
        \row
            \li \l{Qt GENIVI Extras}
            \li Exposes pre-defined interfaces from the GENIVI alliance.
        \row
            \li \l{Qt Safe Renderer}
            \li Provides a UI rendering component that can be used to render safety-critical items,
                such as warning indicators, in functional safety systems, that require
                certification, without changing the Qt libraries. This module separates the
                safety-critical rendering from other parts of the system, ensuring that the module
                can render safety-critical UI elements even if there are failures in the main UI.
    \endtable

    \br

    \table 100%
       \header
            \li {2,1}Tools
       \row
            \li \l{Qt QML Live}{QML Live}
            \li Provides a live reloader environment for rapid development of Qt Quick
                applications, dramatically reducing the time it takes to deploy and test
                changes in the UI design process.
       \row
            \li \l{Qt Creator}{Qt Creator Deployment}
            \li The Qt Creator IDE allows for direct deployment to a device connected via USB or
                Local Area Network (LAN). The same project can be deployed to desktop or target
                devices.
       \row
            \li \l{Qt Creator Plugin for Qt Application Manager}
            \li A plugin that facilitates the development of 3rd party applications within a Qt
                Application Manager setup.
       \row
            \li \l{Qt Automotive Suite Deployment Server}
            \li A lightweight HTTP server that provides network feeds of application packages that
                are available for installation by a Qt Application Manager instance, running on a
                device connected to a network. The UI counterpart for this server is the Downloads
                app in the \l{Neptune 3 UI}{Reference UI}.
       \row
            \li \l{Qt Design Studio}
            \li A UI design and development environment for rapid prototyping of animated UIs.
                This environment provides tools to accomplish your tasks from the application
                design process, to prototyping, and finally to production.
        \row
            \li \l{Qt 3D Studio}
            \li An artist-centric tool to design and build rich user interfaces, as well as
                rendering runtime on top of Qt 3D. This tool allows you to build and prototype 2D
                and 3D user interfaces rapidly. You can tap into the built-in material and effects
                library, as well as import design assets from popular 3D design tools using FBX and
                COLLADA exchange formats.
        \row
            \li GammaRay
            \li A plugin for Qt Creator that provides software introspection for Qt applications.
                This plugin helps to visualize the application behavior and manipulate it at
                run-time, both locally and remotely on an embedded target.
    \endtable

    \section1 Learn more about Qt Automotive Suite

    To learn more about Qt Automotive Suite, start with the following topics:

    \include qtas-common.qdocinc qtas contents

*/

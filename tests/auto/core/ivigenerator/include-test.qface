/**
 * module
 */
module include.test 1.0

import Common 1.0

/**
 * \brief the brief
 * the description
 * continues \l http://qt.io
 */
interface IncludeTester {
    readonly string lastMessage;
    int intValue;
    var varValue;
    @config_simulator: {minimum: 10.}
    real floatValue1;
    @config_simulator: {maximum: 10.}
    real floatValue2;
    string stringValue;

    model<NestedStruct> nestedStructModel;
    model<NestedImportedStruct> nestedImportedStructModel;
    list<int> intList;
    list<Common.CommonStruct> commonStructList;
    list<NestedImportedStruct> nestedImportedStructList;
    TestEnum testEnum;
    Common.CommonEnum commonEnum;

    string echo(string msg);
    string id() const;
    NestedStruct getNestedStruct();
    NestedImportedStruct getNestedImportedStruct();
    Common.CommonStruct getCommonStruct();
    void voidSlot();
    void voidSlot2(int param);
    void timer(int interval);
    Common.CommonFlag flagMethod(Common.CommonFlag testFlag);
    Common.CommonEnum enumMethod(Common.CommonEnum testEnum);

    signal anotherChanged(NestedImportedStruct another);
    signal foobar(string foo);
    signal somethingHappened();
    signal newValueAvailable(var newValue);
}

@config: { zoned: true }
interface IncludeTesterZoned {
    readonly string lastMessage;
    int intValue;
    var varValue;
    @config_simulator: {minimum: 10.}
    real floatValue1;
    @config_simulator: {maximum: 10.}
    real floatValue2;
    string stringValue;

    model<NestedStruct> nestedStructModel;
    model<NestedImportedStruct> nestedImportedStructModel;
    list<int> intList;
    list<Common.CommonStruct> commonStructList;
    list<NestedImportedStruct> nestedImportedStructList;
    TestEnum testEnum;
    Common.CommonEnum commonEnum;

    string echo(string msg);
    string id() const;
    NestedStruct getNestedStruct();
    NestedImportedStruct getNestedImportedStruct();
    Common.CommonStruct getCommonStruct();
    void voidSlot();
    void voidSlot2(int param);
    void timer(int interval);
    Common.CommonFlag flagMethod(Common.CommonFlag testFlag);
    Common.CommonEnum enumMethod(Common.CommonEnum testEnum);

    signal anotherChanged(NestedImportedStruct another);
    signal foobar(string foo);
    signal somethingHappened();
    signal newValueAvailable(var newValue);
}

/**
 * \brief A TestFlag
 */
flag TestFlag {
    /**
     * \brief The first value
     */
    TestFlagValue = 1,
    /**
     * \brief The second value
     */
    TestFlagValue = 2,
}

enum TestEnum {
    FirstEnumValue = 1,
    SecondEnumValue = 2
}

struct NestedStruct {
    AnotherStruct anotherStruct;
    TestEnum testEnum;
}

struct AnotherStruct {
    int justANumber;
}

struct NestedImportedStruct {
    Common.CommonStruct commonStruct;
    TestFlag testFlag;
}
